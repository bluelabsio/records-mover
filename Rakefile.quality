require 'quality/rake/task'

task :pronto do
  formatter = '-f github_pr text' if ENV.key? 'PRONTO_GITHUB_ACCESS_TOKEN'
  if ENV.key? 'TRAVIS_PULL_REQUEST'
    ENV['PRONTO_PULL_REQUEST_ID'] = ENV['TRAVIS_PULL_REQUEST']
  elsif ENV.key? 'CIRCLE_PULL_REQUEST'
    ENV['PRONTO_PULL_REQUEST_ID'] = ENV['CIRCLE_PULL_REQUEST'].split('/').last
  end
  sh "pronto run #{formatter} -c origin/master --no-exit-code --unstaged "\
     '|| true'
  sh "pronto run #{formatter} -c origin/master --no-exit-code --staged || true"
  sh "pronto run #{formatter} -c origin/master --no-exit-code || true"
end

task quality: %i[pronto]

Quality::Rake::Task.new do |t|
  # t.verbose = true

  t.skip_tools = [
    'rails_best_practices',
    'brakeman',
    'bundle_audit',
    'cane',
    'flay',
    'flog',
    'pycodestyle',
    'reek',
    'rubocop',
  ]

  t.source_files_exclude_glob =
    '{cover/**/*,tests/integration/records/records_schema_v1_schema.json,tests/unit/records/schema/future_incompatible_redshift_example_1.json,tests/unit/records/schema/pandas_example_1.json,tests/unit/records/schema/redshift_example_1.json,records_mover/db/bigquery/load_job_config_options.py,records_mover/records/pandas/read_csv_options.py,.circleci/config.yml}'
end
