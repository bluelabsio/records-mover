from typing import Any, Optional

DEFAULT_LOGGING_CONFIG_PORT: int
RESET_ERROR: Any


def fileConfig(
    fname: Any, defaults: Optional[Any] = ..., disable_existing_loggers: bool = ...
) -> None: ...


IDENTIFIER: Any


def valid_ident(s: Any): ...


class ConvertingMixin:
    def convert_with_key(self, key: Any, value: Any, replace: bool = ...): ...
    def convert(self, value: Any): ...


class ConvertingDict(dict, ConvertingMixin):
    def __getitem__(self, key: Any): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def pop(self, key: Any, default: Optional[Any] = ...): ...


class ConvertingList(list, ConvertingMixin):
    def __getitem__(self, key: Any): ...
    def pop(self, idx: int = ...): ...


class ConvertingTuple(tuple, ConvertingMixin):
    def __getitem__(self, key: Any): ...


class BaseConfigurator:
    CONVERT_PATTERN: Any = ...
    WORD_PATTERN: Any = ...
    DOT_PATTERN: Any = ...
    INDEX_PATTERN: Any = ...
    DIGIT_PATTERN: Any = ...
    value_converters: Any = ...
    importer: Any = ...
    config: Any = ...
    def __init__(self, config: Any) -> None: ...
    def resolve(self, s: Any): ...
    def ext_convert(self, value: Any): ...
    def cfg_convert(self, value: Any): ...
    def convert(self, value: Any): ...
    def configure_custom(self, config: Any): ...
    def as_tuple(self, value: Any): ...


class DictConfigurator(BaseConfigurator):
    def configure(self) -> None: ...
    def configure_formatter(self, config: Any): ...
    def configure_filter(self, config: Any): ...
    def add_filters(self, filterer: Any, filters: Any) -> None: ...
    def configure_handler(self, config: Any): ...
    def add_handlers(self, logger: Any, handlers: Any) -> None: ...

    def common_logger_config(
        self, logger: Any, config: Any, incremental: bool = ...
    ) -> None: ...

    def configure_logger(
        self, name: Any, config: Any, incremental: bool = ...
    ) -> None: ...
    def configure_root(self, config: Any, incremental: bool = ...) -> None: ...


dictConfigClass = DictConfigurator


def dictConfig(config: Any) -> None: ...
def listen(port: Any = ..., verify: Optional[Any] = ...): ...
def stopListening() -> None: ...
