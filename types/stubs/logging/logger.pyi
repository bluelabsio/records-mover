from typing import Any, Optional
from .filterer import Filterer  # noqa


class Logger(Filterer):
    name: Any = ...
    level: Any = ...
    parent: Any = ...
    propagate: bool = ...
    handlers: Any = ...
    disabled: bool = ...
    def __init__(self, name: Any, level: Any = ...) -> None: ...
    def setLevel(self, level: Any) -> None: ...
    def debug(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def info(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def warn(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def error(self, msg: str, *args: Any, **kwargs: Any) -> None: ...

    def exception(
        self, msg: str, *args: Any, exc_info: bool = ..., **kwargs: Any
    ) -> None: ...
    def critical(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    fatal: Any = ...
    def log(self, level: Any, msg: str, *args: Any, **kwargs: Any) -> None: ...
    def findCaller(self, stack_info: bool = ..., stacklevel: int = ...): ...

    def makeRecord(
        self,
        name: Any,
        level: Any,
        fn: Any,
        lno: Any,
        msg: Any,
        args: Any,
        exc_info: Any,
        func: Optional[Any] = ...,
        extra: Optional[Any] = ...,
        sinfo: Optional[Any] = ...,
    ): ...
    def handle(self, record: Any) -> None: ...
    def addHandler(self, hdlr: Any) -> None: ...
    def removeHandler(self, hdlr: Any) -> None: ...
    def hasHandlers(self): ...
    def callHandlers(self, record: Any) -> None: ...
    def getEffectiveLevel(self): ...
    def isEnabledFor(self, level: Any): ...
    def getChild(self, suffix: Any): ...
    def __reduce__(self): ...
